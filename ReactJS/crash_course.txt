

When we think of a react app, we should be thinking about a collection of
components.


render method is required when we create a component.
 render(){
 return (
 )
 }


Other techniques have emerged using createClass.
We can make classes. Using a class keyword.
There are some ways to create components we saw.

1- using createClass
2- using class keyword
3- using an anonymous functions.


using states for your React projects.

1- getInitialState(){
	// is a very important function that run immediatly inside the cimponent.

}

States is a big topic in react that needs a apecia care. 

How to grap value from fields or text areas: use the ref property.


props types: Typerror 


- Last video in section 4 is about putting notes on the board.




-  Render multiple components: Every single component can only return one parent element. 

Example: 



// This is wrong. Make sure to return one parent component: Example: 

var component = React.createClass({
render: function() {

return (
<h1> Hello World </h1>
<p> My name is Aziz </p>

)
}
})



CORRECT:

var component = React.createClass({
render: function() {

return (
<div>
<h1> Hello World </h1>
<p> My name is Aziz </p>
</div>
)
}
})



Even inside the ReactDOM.render (
<div>
<Component/>
<Component/>
<Component/>
</div>
)




react states: properties vs states ? 


propties such as this.props.children or this.props.text

states: can change anytime. Say you want to change states of a  button when hovering over the button, states can let you do that because 

Whenever something stays the same , then use properties, otherwise, use states if components


- - — - - -- - — - - -- - — - - -- - — - - -- - — - - -- - — - - -- - — - - -- - — - - -

Now, we want to change the Edit button.



Multiple child components: Easy.





—————————————————————————————————————————————————————————————————————————————————————————
Deleting and updating components:

 
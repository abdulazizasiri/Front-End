Learn React the basics:
Prerequisites:

HTML5

CSS3

Javascript: Important and ES6


NodeJs

-  - - -
What is Reactjs ?

-JS library to make ui comonents.

Features:
- Makes page page apps building very fast.

- High speed virtual DOM. Changes makes it efficenet.


React: This is why it makes popular.

Uses Functional programming. function compostions

-It never reads from the real DOM. This is why it is very fast.

It never checks the real DOM until

Devloper tools from google chrome store:

1- react detector: tHis is just for fun to see what websites use react.
Check after downloading reacr detecteL www,airbnb.com to see it.

2- react developer tools: makes play eith the react code on the browser.

- - -- - - -

Getting started:


React Syntax:

1- Add the script you want on the html page inside the head tags.


under the body and inside the script, add the follwoing. Just to start.
// This function takes two arguments:
1- What we want to createClass
2- Where we want ot put it.

<div id="RES"> </div>
ReacttDOM.Render(x, y)
x=React.CreareElement('div',null,'Hello World')

y= document.getElementById('RES')


// This syntax can get very messy.

Look for example for this code:

<div id='reacts'></div>
        <script>
        ReactDOM.render(React.createElement('ul',null,React.createElement('li',null,'item 1'),
            React.createElement('li',null,'item 2'),
            React.createElement('li',null,'item 3')),
            document.getElementById('reacts'))
        </script>

We wanted to add a list of items, but the code can br msessy as shown.

In this case, we should use JSX.

<div id='reacts'></div>
<script>
ReactDOM.render(
    <ul>
    <li> item 1 </li>
    <li> item 2 </li>
    <li> item 3 </li>
    </ul>

,document.getElementById('reacts'))
</script>

This wil  not work.


You need babel to make it work. it is a transpile that changes source to a different source.


This is the example will make it work.


 - - -- - - - -- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ------ - - --
-REACT COMPONENTS. This is what we are going to deal with when creating React apps.
apps using reacts are nothing but a collection of components.
-Components are small user interface elements that displays data as it changes over time.
- We can use these components and reusable them again.
- React can be used for the entire site, ot small parts of i
Example Code:

<script type='text/babel'>
onst MyCm = React.createClass({render(){
            return (<div>
                <h1> Hello World </h1>
                <p> This is Fun fun function </p>
                </div>
                )
        }})
        ReactDOM.render(<MyCm />,document.getElementById('reacts'))
     </script>


//createClass takes an object, this object {} takes a function called render function.
// render () retutns the html elements we want to render. watch here the babel helped us rendering the <div> hello world <>
---------------------------------------------------------------------------------------------------


This last part is very important because when react first introduced, createClass was the only way to create components.
So, using ES6 classes, we can do many things using classes.


Here is an example:

class MyCm extends React.Component {
     render(){
     return <div>
         <h1> Hello World </h1>
         <p> This is Fun fun function </p>
         </div>
     }
 }



A thid way to create components is through arrow functions.
let MyCm = () => {
                return (
                <div>
                 <h1> Hello World </h1>
                <p> This is Fun fun function </p>
                </div>
                )
        }
 Watch: This arrow function componet does not take a render() function.


 ----------------------------------------------------------------------------------

 WOW: components properties : it makes components very dynamic.
 Few things to know:
 1- Sending properties to components is like adding HTML attributes.
{Means the name can be anything}
We have this.props.{TEXT}

ReactDOM.render(<div>
<mycomponent text="This is this.props.text"/>
</div> , docuemnt.getElementById('OnyourAss');


----------------------------------------------------------------------------------


Handling Events:

The way we refer to jsx classes to add style on them or anyhing else, we use
className=''value

- we created event, functions that bind events.

edit: This is a really cool feature.


One of the most important react conceept is states. When the state is changed, the rendsre function will be called again.
----------------------------------------------------------------------------------

getInitialState() is used to update the page when



This is Important: IT is about states in functions.

<!DOCTYPE html>
<html>
<head>
        <script src="https://fb.me/react-0.14.3.js"></script>
        <script src="https://fb.me/react-dom-0.14.3.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.js"></script>
        <link rel="stylesheet" type="text/css" href="style.css">
        <title>Intro to State</title>
    </head>
    <body>
        <div id='reacts'></div>

       <script type='text/babel'>
    //      this is the first line of code.
    //     <div id="RES"> </div>
    // ReacttDOM.Render(x, y)
    // x=React.CreareElement('div',null,'Hello World')

       var CheckBox = React.createClass({
          getInitialState(){
            return {checked:false}
        },
        handleCheck(){
            this.setState({checked: !this.state.checked})
        },
        render(){
        var msg
        if (this.state.checked){
            msg = "checked"
        } else {
            msg = "unchecked"
        }


        return (
            <div>
        <input type='checkbox' onChange={this.handleCheck}/>
        <p>This box is {msg}</p>
        </div>)
       }})
        // class MyCm extends React.Component {
        //     render(){
        //     return <div>
        //         <h1> Hello World </h1>
        //         <p> This is Fun fun function </p>
        //         </div>
        //     }
        // }
        // This way is when we do not use class ex
        // const MyCm = React.createClass({render(){
        //     return ( <section>
        //         <h1> Hello World </h1>
        //         <p> This is Fun fun function </p>
        //         </section>
        //         )
        // }})
            // this is the second paramater.
            // instead of this messy code.
        ReactDOM.render(<CheckBox/>
            ,
            document.getElementById('reacts'))
        </script>
    </body>
    </html>



    - - - - -- - -

    This is states:


    <!DOCTYPE html>
<html>
<head>
        <script src="https://fb.me/react-0.14.3.js"></script>
        <script src="https://fb.me/react-dom-0.14.3.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.js"></script>
        <link rel="stylesheet" type="text/css" href="style.css">
        <title>Intro to State</title>
    </head>
    <body>
        <div id='reacts'></div>

       <script type='text/babel'>
    //      this is the first line of code.
    //     <div id="RES"> </div>
    // ReacttDOM.Render(x, y)
    // x=React.CreareElement('div',null,'Hello World')

        var Note = React.createClass({
            getInitialState(){
                return {editing:false}
            },
              edit(){
                this.setState({editing: true})
            },
            save(){
                this.setState({editing: false})
            },
            remove(){
                alert('Remove Function')
            },
            renderForm() {
                return (
                    <div className= 'note'>
                    <textarea></textarea>
                    <button onClick={this.save}>SAVE</button>
                    </div>
                    )
            },
            renderDisplay(){
                    return (
                <div className='note'>
                <p>{this.props.children}</p>
                <span>
                <button onClick={this.edit}>Edit </button>
                <button onClick={this.remove}> X </button>
                </span>
                </div>

                )

            },
            render(){
                if (this.state.editing){
                    return this.renderForm();
                }
                return this.renderDisplay();
        }})
        // class MyCm extends React.Component {
        //     render(){
        //     return <div>
        //         <h1> Hello World </h1>
        //         <p> This is Fun fun function </p>
        //         </div>
        //     }
        // }
        // This way is when we do not use class ex
        // const MyCm = React.createClass({render(){
        //     return ( <section>
        //         <h1> Hello World </h1>
        //         <p> This is Fun fun function </p>
        //         </section>
        //         )
        // }})
            // this is the second paramater.
            // instead of this messy code.
        ReactDOM.render(<Note>Hello World</Note>
            ,
            document.getElementById('reacts'))
        </script>
    </body>
    </html>




- - -- - - - - --

propTypes 
